#!/usr/bin/python
# -*- coding: utf-8 -*-

# Config
# key_func=i2c_code,Lirc_key_name_by_Lir.conf
#
#
#

debug=0

# адрес микросхемы расширителя портов
extaddr=0x20

# Порт GPIO где слушаем прерывание
PIN_INT=25

# Возвращает при всех отпущенных кнопках
key_return=0xff

#

# имя секции описывающей пульт в lircd.conf
section='JVC'

#кнопки с фиксацией
mute=0xbf,'KEY_MUTE'

# Кнопки без фиксации (имя=адрес,имя в Lircd.conf,время удержания в 1/10 сек)
volup=0xdf,'KEY_VOLUMEUP',10
voldown=0xef,'KEY_VOLUMEDOWN',0

# import libraries
import smbus as smbus
import RPIO
from time import *
import sys
import lcddriver
import string

#from subprocess import Popen, PIPE

#configure I2C bus for functions
i2c = smbus.SMBus(1)

# Инициируем LCD
lcd = lcddriver.lcd()

# Remote Section
if (debug == 1):
   print hex(volup[0]), " ",volup[1]

# Настраиваем порт на прием прерываний
RPIO.setup(PIN_INT, RPIO.IN, pull_up_down=RPIO.PUD_DOWN)

def vol_chg(key):
	    lcd.lcd_clear()
	    c=0
	    if key == 'volup':
		fst_str="   Volume  UP   "
		mot=" Volume +"
		key_addr=volup[0]
		pause=volup[2]
	    if key == 'voldown':
		fst_str="  Volume  DOWN  "
		mot=" Volume -"
		key_addr=voldown[0]
		pause=voldown[2]

	    c2=0
	    while c <= pause:
	        #
		state=i2c.read_byte( extaddr )
		if state != key_addr:
		    break
		c2+=1
		lcd.lcd_display_string(fst_str, 1)
		if c2 == 1:
		  while c2 <= 2:    
		    sleep(0.1)
		    c2+=1
		  if (debug == 1):
		    print c2, "Sleep END"
		else:
		  sleep(0.2)
		  lcd.lcd_display_string(str(c2), 2)
		

# Отрабатывается по приходу прерывания
def gpio_callback(gpio_id, val):
    #Читаем адрес нажатой кнопки
    try:
       key_addr = i2c.read_byte( extaddr )
       if (debug == 1):
	   print gpio_id, val, 'At address 0x{0:2x} READ 0x{1:2x}'.format( extaddr, key_addr )
    except IOError :
       if (debug == 1):
           print 'PCF8574 Device not found at I2C address 0x{1:2x}'.format( extaddr, key_addr )
           error = 1


    if key_addr != key_return:
        # Обрабатываем одиночные нажатые кнопки
	if key_addr == volup[0]:
	    #try:
		vol_chg('volup')
	    #except Exception:
		#print('Это что ещё такое?')
	elif key_addr == voldown[0]:
	    vol_chg('voldown')
	elif key_addr == mute[0]:
	    #lcd.buf_clear()
	    lcd.lcd_display_string("Tun: Select Src", 1)
	    lcd.lcd_display_string("CH: Change Fold", 2)

# Обрабатываем комбинации нажатых кнопок

	if key_addr == (mute[0] & volup[0]):
	    #print "Volume+ and mute"
	    lcd.lcd_display_string("Up: Next Folder ", 1)
	    lcd.lcd_display_string("Down: Prev Fold", 2)
	elif key_addr == (mute[0] & voldown[0]):
	    #print "Volume- and mute"	
	    lcd.lcd_display_string("  Volume  DOWN  ", 1)
	    lcd.lcd_display_string("      Mute      ", 2)
    else:
	if (debug == 1):
	    print 'All Keys released. READ ', key_addr
	
	lcd.lcd_display_string("TUN: Volume Chg", 1)
	lcd.lcd_display_string("CH: Track Selec", 2)

# Вызов обработчика прерываний
#RPIO.add_interrupt_callback(PIN_INT, gpio_callback, pull_up_down=RPIO.PUD_UP, threaded_callback=True, debounce_timeout_ms=100)
RPIO.add_interrupt_callback(PIN_INT, gpio_callback, pull_up_down=RPIO.PUD_UP, threaded_callback=False, debounce_timeout_ms=50)

# Ждем прихода прерывания
RPIO.wait_for_interrupts()
